# coding: utf-8

"""
    Dynamic API Specification

    This is a dynamically generated API specification for all endpoints existing on the current project.  # noqa: E501

    OpenAPI spec version: 10.10.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ItemsScrapeHashes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'page_number': 'int',
        'hash_value': 'str',
        'scraped_on': 'str'
    }

    attribute_map = {
        'id': 'id',
        'page_number': 'page_number',
        'hash_value': 'hash_value',
        'scraped_on': 'scraped_on'
    }

    def __init__(self, id=None, page_number=None, hash_value=None, scraped_on=None):  # noqa: E501
        """ItemsScrapeHashes - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._page_number = None
        self._hash_value = None
        self._scraped_on = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if page_number is not None:
            self.page_number = page_number
        if hash_value is not None:
            self.hash_value = hash_value
        if scraped_on is not None:
            self.scraped_on = scraped_on

    @property
    def id(self):
        """Gets the id of this ItemsScrapeHashes.  # noqa: E501


        :return: The id of this ItemsScrapeHashes.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ItemsScrapeHashes.


        :param id: The id of this ItemsScrapeHashes.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def page_number(self):
        """Gets the page_number of this ItemsScrapeHashes.  # noqa: E501


        :return: The page_number of this ItemsScrapeHashes.  # noqa: E501
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this ItemsScrapeHashes.


        :param page_number: The page_number of this ItemsScrapeHashes.  # noqa: E501
        :type: int
        """

        self._page_number = page_number

    @property
    def hash_value(self):
        """Gets the hash_value of this ItemsScrapeHashes.  # noqa: E501


        :return: The hash_value of this ItemsScrapeHashes.  # noqa: E501
        :rtype: str
        """
        return self._hash_value

    @hash_value.setter
    def hash_value(self, hash_value):
        """Sets the hash_value of this ItemsScrapeHashes.


        :param hash_value: The hash_value of this ItemsScrapeHashes.  # noqa: E501
        :type: str
        """

        self._hash_value = hash_value

    @property
    def scraped_on(self):
        """Gets the scraped_on of this ItemsScrapeHashes.  # noqa: E501


        :return: The scraped_on of this ItemsScrapeHashes.  # noqa: E501
        :rtype: str
        """
        return self._scraped_on

    @scraped_on.setter
    def scraped_on(self, scraped_on):
        """Sets the scraped_on of this ItemsScrapeHashes.


        :param scraped_on: The scraped_on of this ItemsScrapeHashes.  # noqa: E501
        :type: str
        """

        self._scraped_on = scraped_on

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemsScrapeHashes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemsScrapeHashes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
